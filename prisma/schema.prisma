// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountProvider {
  LOCAL
  GOOGLE
}

enum Role {
  USER
  ADMIN
}

model Account {
  id              String           @id @default(uuid(7)) @db.Uuid
  fullname        String           @db.VarChar(90)
  phone           String?          @unique @db.VarChar(20)
  email           String           @unique @db.VarChar(191)
  password        String?          @db.VarChar(90)
  photo           String?
  role            Role             @default(USER)
  socialId        String?          @unique @map("social_id")
  accountProvider AccountProvider? @default(LOCAL) @map("account_provider")
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime         @updatedAt() @map("updated_at") @db.Timestamptz(3)
  deletedAt       DateTime?        @map("deleted_at") @db.Timestamptz(3)
  verifiedAt      DateTime?        @map("verified_at") @db.Timestamptz(3)
  Session         Session?

  @@map("account")
}

model Session {
  id        String  @id @default(uuid(7)) @db.Uuid
  token     String
  accountId String  @unique @map("account_id") @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt() @map("updated_at") @db.Timestamptz(3)

  @@map("session")
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
}

model VoucherCategory {
  id          String       @id @default(uuid(7)) @db.Uuid
  name        String       @db.VarChar(90)
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime     @updatedAt() @map("updated_at") @db.Timestamptz(3)
  deletedAt   DateTime?    @map("deleted_at") @db.Timestamptz(3)
  VoucherTags VoucherTag[]

  @@map("voucher_category")
}

model VoucherTag {
  id              String          @id @default(uuid(7)) @db.Uuid
  name            String          @db.VarChar(90)
  categoryId      String          @map("category_id") @db.Uuid
  voucherCategory VoucherCategory @relation(fields: [categoryId], references: [id])
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime        @updatedAt() @map("updated_at") @db.Timestamptz(3)
  deletedAt       DateTime?       @map("deleted_at") @db.Timestamptz(3)
  Voucher         Voucher[]

  @@map("voucher_tag")
}

model Voucher {
  id                   String                 @id @default(uuid(7)) @db.Uuid
  title                String                 @db.VarChar(191)
  status               VoucherStatus          @default(ACTIVE)
  description          String
  price                Decimal                @db.Decimal(8, 2)
  stockAmount          Int                    @map("stock_amount") @db.Integer()
  tagId                String                 @map("tag_id") @db.Uuid
  voucherTag           VoucherTag             @relation(fields: [tagId], references: [id])
  usageExpiredTime     DateTime               @map("usage_expired_time") @db.Timestamptz(3)
  saleExpiredTime      DateTime               @map("sale_expired_time") @db.Timestamptz(3)
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt            DateTime               @updatedAt() @map("updated_at") @db.Timestamptz(3)
  VoucherTermAndCondTh VoucherTermAndCondTh[]
  VoucherTermAndCondEN VoucherTermAndCondEN[]
  VoucherImg           VoucherImg[]
  VoucherPromotion     VoucherPromotion[]
  PackageVoucher       PackageVoucher[]
  PackageRewardVoucher PackageRewardVoucher[]
  OrderItemVoucher     OrderItemVoucher[]
  OrderItemPackage     OrderItemPackage[]

  @@map("voucher")
}

model VoucherImg {
  id        String   @id @default(uuid(7)) @db.Uuid
  imgPath   String   @map("img_path")
  voucherId String   @map("voucher_id") @db.Uuid
  voucher   Voucher  @relation(fields: [voucherId], references: [id])
  mainImg   Boolean  @map("main_img")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt() @map("updated_at") @db.Timestamptz(3)

  @@map("voucher_img")
}

model VoucherTermAndCondTh {
  id          String    @id @default(uuid(7)) @db.Uuid
  description String
  voucherId   String    @map("voucher_id") @db.Uuid
  voucher     Voucher   @relation(fields: [voucherId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt() @map("updated_at") @db.Timestamptz(3)
  inactiveAt  DateTime? @map("inactive_at") @db.Timestamptz(3)

  @@map("voucher_term_condition_th")
}

model VoucherTermAndCondEN {
  id          String    @id @default(uuid(7)) @db.Uuid
  description String
  voucherId   String    @map("voucher_id") @db.Uuid
  voucher     Voucher   @relation(fields: [voucherId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt() @map("updated_at") @db.Timestamptz(3)
  inactiveAt  DateTime? @map("inactive_at") @db.Timestamptz(3)

  @@map("voucher_term_condition_en")
}

model UsableDaysAfterPurchased {
  id         String    @id @default(uuid(7)) @db.Uuid
  usableDays Int       @map("usable_days")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt() @map("updated_at") @db.Timestamptz(3)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(3)
  Order      Order[]

  @@map("usable_days_after_purchased")
}

model VoucherPromotion {
  id                 String               @id @default(uuid(7)) @db.Uuid
  name               String               @db.VarChar(191)
  promotionPrice     Decimal              @map("promotion_price") @db.Decimal(8, 2)
  stockAmount        Int                  @map("stock_amount") @db.Integer()
  voucherId          String               @map("voucher_id") @db.Uuid
  voucher            Voucher              @relation(fields: [voucherId], references: [id])
  sellStartedAt      DateTime             @map("sell_started_at") @db.Timestamptz(3)
  sellExpiredAt      DateTime             @map("sell_expired_at") @db.Timestamptz(3)
  usableAt           DateTime             @map("usable_started_at") @db.Timestamptz(3)
  usableExpiredAt    DateTime             @map("usable_expired_at") @db.Timestamptz(3)
  deletedAt          DateTime?            @map("deleted_at") @db.Timestamptz(3)
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt          DateTime             @updatedAt() @map("updated_at") @db.Timestamptz(3)
  OrderItemPromotion OrderItemPromotion[]

  @@map("voucher_promotion")
}

model PackageVoucher {
  id                          String                        @id @default(uuid(7)) @db.Uuid
  quotaVoucherId              String                        @map("quota_voucher_id") @db.Uuid
  title                       String                        @db.VarChar(191)
  voucher                     Voucher                       @relation(fields: [quotaVoucherId], references: [id])
  stockAmount                 Int                           @map("stock_amount") @db.Integer()
  packagePrice                Decimal                       @map("package_price") @db.Decimal(8, 2)
  quotaAmount                 Int                           @map("quota_amount") @db.SmallInt
  startedAt                   DateTime                      @map("started_at") @db.Timestamptz(3)
  expiredAt                   DateTime                      @map("expired_at") @db.Timestamptz(3)
  createdAt                   DateTime                      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt                   DateTime                      @updatedAt() @map("updated_at") @db.Timestamptz(3)
  deletedAt                   DateTime?                     @map("deleted_at") @db.Timestamptz(3)
  PackageRewardVoucher        PackageRewardVoucher[]
  OrderItemPackage            OrderItemPackage[]
  PackageImg                  PackageImg[]
  PackageVoucherTermAndCondTH PackageVoucherTermAndCondTH[]
  PackageVoucherTermAndCondEN PackageVoucherTermAndCondEN[]

  @@map("package_voucher")
}

model PackageVoucherTermAndCondTH {
  id               String         @id @default(uuid(7)) @db.Uuid
  description      String
  packageVoucherId String         @map("package_voucher_id") @db.Uuid
  packageVoucher   PackageVoucher @relation(fields: [packageVoucherId], references: [id])
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime       @updatedAt() @map("updated_at") @db.Timestamptz(3)
  inactiveAt       DateTime?      @map("inactive_at") @db.Timestamptz(3)

  @@map("package_voucher_term_condition_th")
}

model PackageVoucherTermAndCondEN {
  id               String         @id @default(uuid(7)) @db.Uuid
  description      String
  packageVoucherId String         @map("package_voucher_id") @db.Uuid
  packageVoucher   PackageVoucher @relation(fields: [packageVoucherId], references: [id])
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt        DateTime       @updatedAt() @map("updated_at") @db.Timestamptz(3)
  inactiveAt       DateTime?      @map("inactive_at") @db.Timestamptz(3)

  @@map("package_voucher_term_condition_en")
}

model PackageImg {
  id        String         @id @default(uuid(7)) @db.Uuid
  imgPath   String         @map("img_path")
  packageId String         @map("package_id") @db.Uuid
  package   PackageVoucher @relation(fields: [packageId], references: [id])
  mainImg   Boolean        @map("main_img")
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime       @updatedAt() @map("updated_at") @db.Timestamptz(3)

  @@map("package_img")
}

model PackageRewardVoucher {
  id              String         @id @default(uuid(7)) @db.Uuid
  rewardVoucherId String         @map("reward_voucher_id") @db.Uuid
  voucher         Voucher        @relation(fields: [rewardVoucherId], references: [id])
  packageId       String         @map("package_id") @db.Uuid
  package         PackageVoucher @relation(fields: [packageId], references: [id])

  @@map("package_reward_voucher")
}

model Order {
  id                         String                   @id @default(uuid(7)) @db.Uuid
  totalPrice                 Decimal                  @map("total_price") @db.Decimal(10, 2)
  usableDaysAfterPurchasedId String                   @map("usable_days_after_purchased_id") @db.Uuid
  usableDaysAfterPurchased   UsableDaysAfterPurchased @relation(references: [id], fields: [usableDaysAfterPurchasedId])
  accountId                  String                   @map("account_id") @db.Uuid
  createdAt                  DateTime                 @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt                  DateTime                 @updatedAt() @map("updated_at") @db.Timestamptz(3)
  deletedAt                  DateTime?                @map("deleted_at") @db.Timestamptz(3)
  Transaction                Transaction?
  OrderItem                  OrderItem[]

  @@map("order")
}

model OrderItem {
  id                 String              @id @default(uuid(7)) @db.Uuid
  orderId            String              @map("order_id") @db.Uuid
  order              Order               @relation(fields: [orderId], references: [id])
  qrcodeImgPath      String              @map("qrcode_img_path")
  code               String              @unique @db.VarChar(40)
  redeemedAt         DateTime?           @map("redeemed_at") @db.Timestamptz(3)
  updatedAt          DateTime            @updatedAt() @map("updated_at") @db.Timestamptz(3)
  OrderItemVoucher   OrderItemVoucher?
  OrderItemPromotion OrderItemPromotion?
  OrderItemPackage   OrderItemPackage?

  @@map("order_item")
}

model OrderItemVoucher {
  id          String    @id @default(uuid(7)) @db.Uuid
  orderItemId String    @unique @map("order_item_id") @db.Uuid
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  voucherId   String    @map("voucher_id") @db.Uuid
  voucher     Voucher   @relation(fields: [voucherId], references: [id])

  @@map("order_item_voucher")
}

model OrderItemPromotion {
  id                 String           @id @default(uuid(7)) @db.Uuid
  orderItemId        String           @unique @map("order_item_id") @db.Uuid
  orderItem          OrderItem        @relation(fields: [orderItemId], references: [id])
  voucherPromotion   VoucherPromotion @relation(fields: [voucherPromotionId], references: [id])
  voucherPromotionId String           @map("voucher_promotion_id") @db.Uuid

  @@map("order_item_promotion")
}

model OrderItemPackage {
  id            String         @id @default(uuid(7)) @db.Uuid
  orderItemId   String         @unique @map("order_item_id") @db.Uuid
  orderItem     OrderItem      @relation(fields: [orderItemId], references: [id])
  package       PackageVoucher @relation(fields: [packageId], references: [id])
  packageId     String         @map("package_id") @db.Uuid
  rewardVoucher Boolean        @map("reward_voucher")
  voucherId     String         @map("voucher_id") @db.Uuid
  voucher       Voucher        @relation(fields: [voucherId], references: [id])

  @@map("order_item_package")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model TransactionSystem {
  id          String        @id @default(uuid(7)) @db.Uuid
  system      String        @unique @db.VarChar(90)
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime      @updatedAt() @map("updated_at") @db.Timestamptz(3)
  deletedAt   DateTime?     @map("deleted_at") @db.Timestamptz(3)
  Transaction Transaction[]

  @@map("transaction_system")
}

model Transaction {
  id                  String            @id @default(uuid(7)) @db.Uuid
  orderId             String            @unique @map("order_id") @db.Uuid
  order               Order             @relation(fields: [orderId], references: [id])
  paymentId           String?           @map("payment_id") @db.Uuid
  transactionSystem   TransactionSystem @relation(fields: [transactionSystemId], references: [id])
  status              TransactionStatus @default(PENDING)
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt           DateTime          @updatedAt() @map("updated_at") @db.Timestamptz(3)
  deletedAt           DateTime?         @map("deleted_at") @db.Timestamptz(3)
  transactionSystemId String            @map("transaction_system_id") @db.Uuid

  @@map("transaction")
}

model Owner {
  id                     String     @id @default(uuid(7)) @db.Uuid
  name                   String     @db.VarChar(191)
  emailForSendingVoucher String     @map("email_for_sending_voucher") @db.VarChar(191)
  passwordForEmail       String     @map("password_for_email") @db.VarChar(191)
  passwordForRedeem      String     @map("password_for_redeem") @db.VarChar(191)
  colorCode              String     @map("color_code") @db.VarChar(90)
  createdAt              DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt              DateTime   @updatedAt() @map("updated_at") @db.Timestamptz(3)
  OwnerImg               OwnerImg[]

  @@map("owner")
}

enum OwnerImgType {
  BACKGROUND
  LOGO
}

model OwnerImg {
  id        String       @id @default(uuid(7)) @db.Uuid
  ownerId   String       @map("owner_id") @db.Uuid
  owner     Owner        @relation(fields: [ownerId], references: [id])
  imgPath   String       @map("img_path")
  type      OwnerImgType @map("img_type")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime     @updatedAt() @map("updated_at") @db.Timestamptz(3)
}
